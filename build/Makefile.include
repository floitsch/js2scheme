# out of memory can "crash" a machine. avoid this.
ULIMITS = ulimit -d 400000 -m 400000 -v 400000

RUNTIME_DIR = $(JS2SCHEME_DIR)/js-runtime
UNICODE_DIR = $(JS2SCHEME_DIR)/unicode
JS2SCHEME = $(JS2SCHEME_DIR)/js2scheme
BIGLOO = bigloo
AFILE = bglafile
#TARGET_AFILE = $(TARGET).afile ## currently not possible :(
TARGET_AFILE="`basename $(TARGET)`.afile"

#JS2SCHEME_FLAGS=--non-strict-literals --non-strict-fields
JS2SCHEME_FLAGS=

BGL_UNSAFE =
BGL_FLAGS = -g $(BGL_UNSAFE) \
             -L $(JS2SCHEME_DIR) -L $(RUNTIME_DIR) -L $(UNICODE_DIR) \
             -library utf

SCM_SOURCES = $(SOURCES:%.js=%.scm)
OBJS = $(SCM_SOURCES:%.scm=%.o)

#LD_PATHS_ENV = env LD_LIBRARY_PATH=$$LD_LIBRARY_PATH:$$PWD/$(JS2SCHEME_DIR):$$PWD/$(RUNTIME_DIR):$$PWD/$(UNICODE_DIR)
LD_PATHS_ENV = env LD_LIBRARY_PATH=$$LD_LIBRARY_PATH:$(JS2SCHEME_DIR):$(RUNTIME_DIR):$(UNICODE_DIR)

all.include: run

dirs:
	for f in $(SOURCES); do mkdir -p `dirname "$$f"`; done

%.scm: %.js
	mkdir -p `dirname "$@"`;
	$(LD_PATHS_ENV) $(JS2SCHEME) $(JS2SCHEME_FLAGS) -c -o $@ $^

$(TARGET).exe.scm: $(SCM_SOURCES)
	$(LD_PATHS_ENV) $(JS2SCHEME) $(JS2SCHEME_FLAGS) -o $@ $^

$(TARGET_AFILE): $(SCM_SOURCES)
	 $(AFILE) -o $(TARGET_AFILE) $^
#	 $(AFILE) -o $@ $^

%.o: %.scm | $(TARGET_AFILE)
	$(BIGLOO) $(BGL_FLAGS) -afile $(TARGET_AFILE) -c -o $@ $<

$(TARGET).exe: $(TARGET).exe.o $(OBJS)
	$(BIGLOO) $(BGL_FLAGS) -afile $(TARGET_AFILE) -o $@ $^ -library js2scheme-comp

run: $(TARGET).exe
	$(ULIMITS) && \
	$(LD_PATHS_ENV) `dirname $<`/`basename $<`

.PHONY: run all.include dirs
