# out of memory can "crash" a machine. avoid this.
ULIMITS = ulimit -d 400000 -m 400000 -v 400000

JS2SCHEME_DIR = ..
RUNTIME_DIR = ../js-runtime
JS2SCHEME = $(JS2SCHEME_DIR)/js2scheme
BIGLOO = bigloo
AFILE = bglafile
#TARGET_AFILE = $(TARGET).afile ## currently not possible :(
TARGET_AFILE="`basename $(TARGET)`.afile"

BGL_FLAGS = -L $(JS2SCHEME_DIR) -L $(RUNTIME_DIR) -I $(RUNTIME_DIR)/unicode -g

SCM_SOURCES = $(SOURCES:%.js=%.scm)
OBJS = $(SOURCES:%.js=%.o)

LD_PATHS_ENV = env LD_LIBRARY_PATH=$$LD_LIBRARY_PATH:$$PWD/$(JS2SCHEME_DIR):$$PWD/$(RUNTIME_DIR)

all.include: run

dirs:
	@ for f in $(SOURCES); do mkdir -p `dirname "$$f"`; done

%.scm: %.js
	@ mkdir -p `dirname "$@"`;
	@ $(LD_PATHS_ENV) $(JS2SCHEME) -c -o $@ $^

$(TARGET).exe.scm: $(SCM_SOURCES)
	@ $(LD_PATHS_ENV) $(JS2SCHEME) -o $@ $^

$(TARGET_AFILE): $(SCM_SOURCES)
	echo $(TARGET_AFILE);
	 $(AFILE) -o $(TARGET_AFILE) $^
#	 $(AFILE) -o $@ $^

%.o: %.scm | $(TARGET_AFILE)
	@ $(BIGLOO) $(BGL_FLAGS) -afile $(TARGET_AFILE) -c -o $@ $<

$(TARGET).exe: $(TARGET).exe.o $(OBJS)
	@ $(BIGLOO) $(BGL_FLAGS) -afile $(TARGET_AFILE) -o $@ $^ -library js2scheme-comp

run: $(TARGET).exe
	$(ULIMITS) && \
	$(LD_PATHS_ENV) $<

.PHONY: clean run all.include dirs

clean:
	rm -f *.afile *.o *.scm *.exe
	for d in *; do if [ -d "$$d" ]; then rm -rf "$$d"; fi; done
