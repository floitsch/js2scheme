;; Copyright (c) 2007-2011, Florian Loitsch
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;    * Redistributions of source code must retain the above copyright
;;      notice, this list of conditions and the following disclaimer.
;;    * Redistributions in binary form must reproduce the above copyright
;;      notice, this list of conditions and the following disclaimer in the
;;      documentation and/or other materials provided with the distribution.
;;    * Neither the name of the <organization> nor the
;;      names of its contributors may be used to endorse or promote products
;;      derived from this software without specific prior written permission.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
;; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
;; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
;; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
;; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(module jsre-eval
   (library js2scheme-comp)
   (import jsre-base-string
	   jsre-property-entry)
   (use jsre-Eval-env
	jsre-global-object
	jsre-ht-object
	jsre-scope-object
	jsre-base-object
	jsre-Error
	jsre-conversion)
   (export (js-eval prog top-level-obj top-level-this next-env . Lenvs)
	   (js-Function-eval src::@JS_STRING@)))

;; TODO: currently we just include the macros. That's clearly not the best
;; solution. but at least it works, and is simple.

(define-macro (read-macros)
   (with-input-from-file "macros.sch"
      (lambda ()
	 (let loop ((ms '()))
	    (let ((e (read)))
	       (if (eof-object? e)
		   (list 'quote ms)
		   (loop (cons e ms))))))))

(define *macros* (read-macros))
(define *eval-init-done?* #f)

(define (compile-js src config global-obj global-env tl-this)
   (let ((p (open-input-string (js-string->utf8 src))))
      (unwind-protect
	 (with-handler
	    (lambda (e)
	       (cond
		  ((&error? e)
		   ;; (format "~a ~a\n~a:\n~a\n~a"
		   (syntax-error (utf8->js-string (&error-msg e))
				 (&error-obj e)))
		  (else (syntax-error (STR "unknown syntax error") #f))))
	    (js2scheme-eval p config global-obj global-env tl-this))
	 (close-input-port p))))

(define (run-compiled scm-prog)
;  (eval `(module ,(gensym 'fun-eval)
;           (library js2scheme-runtime)))
   (unless *eval-init-done?*
      (eval `(begin ,@*macros*))
      (set! *eval-init-done?* #t))
   (eval scm-prog))
   
;; js-eval needs several things:
;; - the program prog (obvious)
;; - top-level-obj: the object which will receive new var-decls. Usually the
;;   scope-object of the surrounding function.
;; - top-level-this: usually the 'this' of the surrounding fun.
;; - next-env: the eval-env before the call to 'eval'.
;; - envs: a list of all environments that need to be searched for variables.
;;   note the top-level-obj is in this list too.
(define (js-eval prog top-level-obj top-level-this next-env . Lenvs)
   (if (not (js-string? prog))
       prog
       (let* ((config (let ((ht (make-hashtable)))
			 ;; evaled-string is there anyways.
			 ;; no need to hide the function-string
			 (hashtable-put! ht 'function-strings #t)
			 ;(hashtable-put! ht 'verbose #t)
			 ht))
	      (scm-prog (compile-js prog
				    config
				    top-level-obj
				    (instantiate::Js-Eval-env
				       (objs Lenvs)
				       (next-env next-env))
				    top-level-this)))
	  (run-compiled scm-prog))))

(define (js-Function-eval src)
   (let* ((config (let ((ht (make-hashtable)))
		     ;; evaled-string is there anyways.
		     ;; no need to hide the function-string
		     (hashtable-put! ht 'function-strings #t)
		     ;(hashtable-put! ht 'verbose #t)
		     ht))
	  (scm-prog (compile-js src
				config
				*js-global-object*
				*js-global-env*
				;; *js-global-this* == *js-global-object*
				*js-global-object*)))
      (run-compiled scm-prog)))
