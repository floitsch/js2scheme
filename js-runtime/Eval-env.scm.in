;; Copyright (c) 2007-2011, Florian Loitsch
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;    * Redistributions of source code must retain the above copyright
;;      notice, this list of conditions and the following disclaimer.
;;    * Redistributions in binary form must reproduce the above copyright
;;      notice, this list of conditions and the following disclaimer in the
;;      documentation and/or other materials provided with the distribution.
;;    * Neither the name of the <organization> nor the
;;      names of its contributors may be used to endorse or promote products
;;      derived from this software without specific prior written permission.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
;; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
;; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
;; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
;; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(module jsre-Eval-env
   (import jsre-base-string
	   jsre-base-object
	   jsre-ht-object
	   jsre-property-entry)
   (use jsre-global-object
	jsre-scope-object
	jsre-undefined
	jsre-Error
	jsre-Object
	jsre-Date
	jsre-String
	jsre-Bool
	jsre-Number
	jsre-Function
	jsre-conversion)
   (export (class Js-Eval-env
	      (objs::pair-nil read-only)
	      (next-env read-only))
	   (env-get env::Js-Eval-env id::@JS_STRING@)
	   (env-object env::Js-Eval-env id::@JS_STRING@)
	   (env-typeof-get env::Js-Eval-env id::@JS_STRING@)
	   ;; returns the given new-val
	   (env-set! env::Js-Eval-env id::@JS_STRING@ new-val)
	   (env-delete! env::Js-Eval-env id::@JS_STRING@)))

(define (env-get env id)
   (with-access::Js-Eval-env env (objs next-env)
      (let ((entry (any (lambda (obj)
			   (js-property-contains obj id))
			objs)))
	 (cond
	    (entry
	     (unmangle-false entry))
	    (next-env
	     (env-get next-env id))
	    (else
	     (undeclared-error id))))))

;; same as env-get but returns containing obj too.
;; necessary for fun-calls (see 11.2.3-7)
(define (env-object env id)
   (with-access::Js-Eval-env env (objs next-env)
      (let loop ((objs objs))
	 (cond
	    ((and (null? objs)
		  next-env)
	     (env-object next-env id))
	    ((null? objs)
	     (undeclared-error id))
	    ((js-property-contains (car objs) id)
	     (car objs))
	    (else
	     (loop (cdr objs)))))))

(define (env-typeof-get env id)
   (with-access::Js-Eval-env env (objs next-env)
      (let ((entry (any (lambda (obj)
			   (js-property-contains obj id))
			objs)))
	 (cond
	    (entry
	     (unmangle-false entry))
	    (next-env
	     (env-typeof-get next-env id))
	    (else
	     (js-undefined))))))

(define (env-set! env id new-val)
   (with-access::Js-Eval-env env (objs next-env)
      (let ((mangled (mangle-false new-val)))
	 (cond
	    ((any? (lambda (obj)
		      (js-property-update! obj id mangled))
		   objs)
	     new-val)
	    (next-env
	     (env-set! next-env id new-val))
	    (else
	     (js-property-set! *js-global-object* id new-val)))))
   new-val)
   
(define (env-delete! env id)
   (with-access::Js-Eval-env env (objs next-env)
      (let ((o (any (lambda (obj)
		       (and (js-property-contains obj id)
			    obj))
		    objs)))
	 (cond
	    (o
	     (js-property-safe-delete! o id))
	    (next-env
	     (env-delete! next-env id))
	    (else
	     (delete-error id))))))
